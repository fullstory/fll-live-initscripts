#!/bin/sh

### BEGIN INIT INFO
# Provides:          live-autoconfig
# Required-Start:    
# Required-Stop:     
# Default-Start:     S
# Default-Stop:      
# Short-Description: live sysv-init autoconfiguration script
# Description:       The purpose of live-autoconfig is to manage the sysv-init
#                    runlevels of the live media. It calculates what services
#                    should start by using an utility to lookup sequence
#                    configuration of the same services as preserved on the
#                    read only live media mount and replicating them on the
#                    live read-write ramdisk union mount.
### END INIT INFO

###
# F.U.L.L.S.T.O.R.Y init script
#
# Copyright: (C) 2007 F.U.L.L.S.T.O.R.Y Project
# License:   GPLv2
#
# F.U.L.L.S.T.O.R.Y Project Homepage:
# http://developer.berlios.de/projects/fullstory
###

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="live-autoconfig"

###
# source distro-defaults, no-op unless in live mode
###
FLL_DISTRO_MODE="installed"

if [ -s /etc/default/distro ]; then
	. /etc/default/distro
fi

if [ "${FLL_DISTRO_MODE}" != "live" ]; then
	exit 0
fi

###
# VERBOSE setting and other rcS variables
###
. /lib/init/vars.sh

###
# source lsb functions
###
. /lib/lsb/init-functions

###
# initscripts to be configured
###
INITSCRIPTS="
	glibc.sh
	hostname.sh
	mountkernfs.sh
	udev
	mountdevsubfs.sh
	live-locales
	keymap.sh
	mtab.sh
	ifupdown-clean
	fuse
	networking
	udev-mtab
	ifupdown
	console-screen.sh
	alsa-utils
	x11-common
	wpa-ifupdown
	sendsigs
	umountnfs.sh
"

###
# cheatcode handling, if /proc is not mounted then the initramfs failed
# and executing this script would be an impossible situation
###
for param in $(cat /proc/cmdline); do
	case "${param}" in
		blacklist=*)
			BLACKLIST="${BLACKLIST} ${param#hostname=}"
			;;
		hostname=*)
			CUSTOM_HOSTNAME="${param#hostname=}"
			;;
	esac
done

do_start() {
	###
	# populate sysv-init runlevels with fll_analyze_initscripts based on runlevel
	# configuration of FLL_MOUNTPOINT read-only (preserved) chroot.
	###
	log_daemon_msg "${NAME}" "generating runlevel configuration"
	fll_analyze_initscripts --doit ${FLL_MOUNTPOINT} ${INITSCRIPTS}
	log_end_msg 0

	###
	# custom hostname
	###
	if [ "${CUSTOM_HOSTNAME}" ]; then
		log_daemon_msg "${NAME}" "setting hostame of '${CUSTOM_HOSTNAME}'"
		echo "${CUSTOM_HOSTNAME}" > /etc/hostname
		echo "${CUSTOM_HOSTNAME}" > /etc/mailname
		# update /etc/hosts
		sed -i '/localhost/!s/^\(127.0.0.1[ \t]\+\)\(.\+\)$/\1'"${CUSTOM_HOSTNAME}"'/' \
			/etc/hosts
		log_end_msg 0
	fi

	###
	# honour blacklist= cheatcode to disable naughty modules before udev
	###
	if [ "${BLACKLIST}" ]; then
		log_daemon_msg "${NAME}" "blacklisting modules"
		for module in ${BLACKLIST}; do
			log_progress_msg "${module}"
			echo "# added by: ${NAME}" >> /etc/modprobe.d/blacklist
			echo "blacklist ${module}" >> /etc/modprobe.d/blacklist
		done
		log_end_msg 0
	fi
}

case "${1}" in
	start)
		do_start
		;;
	stop)
		# no-op
		;;
	restart|reload|force-reload)
		echo "Error: argument '${1}' not supported" >&2
		exit 3
		;;
	*)
		echo "Usage: ${NAME} {start|stop}" >&2
		exit 3
		;;
esac

:
