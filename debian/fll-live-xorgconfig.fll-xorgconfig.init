#!/bin/bash

### BEGIN INIT INFO
# Provides:          fll-xorgconfig
# Required-Start:    
# Required-Stop:     
# Default-Start:     S
# Default-Stop:      0 1 6
# Short-Description: configure Xorg xserver
# Description:       The script is intended to configure the
#                    Xorg xserver for use.
### END INIT INFO

###
# F.U.L.L.S.T.O.R.Y init script
#
# Copyright: (C) 2007 F.U.L.L.S.T.O.R.Y Project
# License:   GPLv2
#
# F.U.L.L.S.T.O.R.Y Project Homepage:
# http://developer.berlios.de/projects/fullstory
###

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="fll-xorgconfig"

###
# source distro-defaults, no-op unless in live mode
###
FLL_DISTRO_MODE="installed"

if [ -s /etc/default/distro ]; then
	. /etc/default/distro
fi

if [ "${FLL_DISTRO_MODE}" != "live" ]; then
	exit 0
fi

if [ ! -x /usr/sbin/fll_xorgconfig ] || [ ! -x /usr/sbin/fll_xserver_discover ]; then
	exit 0
fi

# XKBLAYOUT is stored here by /etc/init.d/fll-locales
# TODO: fetch this via debconf, requires it be be preseeded via debocnf
# initially by /etc/init.d/fll-locales
if [ -s /etc/default/fll-locales ]; then
	. /etc/default/fll-locales
fi

###
# source lsb functions
###
. /lib/lsb/init-functions

###
# ANSI escape sequences (N, R, G, Y, B, M, C, W)
###
. /lib/fll/fll-init-cols

###
# cheatcode handling
###
if [ -f /proc/cmdline ]; then
	for param in $(cat /proc/cmdline); do
		case "${param}" in
			flldebug=*)
				[ "${param#flldebug=}" = "${NAME#fll-}" ] && set -x
				;;
			noxorgconfig|xorgconfig=no)
				exit 0
				;;
			nomodelines|noml)
				XMODELINES="no"
				;;
			xdepth=*|depth=*)
				XDEPTH="${param#*depth=}"
				;;
			xhrefresh=*|hsync=*)
				XHORIZSYNC="${param#*=}"
				;;
			xkblayout=*)
				XKBLAYOUT="${param#xkblayout=}"
				;;
			xkbmodel=*)
				XKBMODEL="${param#xkbmodel=}"
				;;
			xkbvariant=*)
				XKBVARIANT="${param#xkbvariant=}"
				;;
			xmodule=*)
				XMODULE="${param#xmodule=}"
				;;
			xrate=*|rate=*)
				XRATE="${param#*rate=}"
				;;
			xscreen=*|screen=*|xmode=*|mode=*)
				XMODES="${param#*=}"
				;;
			xvrefresh=*|vsync=*)
				XVERTREFRESH="${param#*=}"
				;;
		esac
	done
fi

###
# functions...
###
xserver_has_xrandr() {
	[ "${1}" ] || return 1

	# xserver driver
	local DRIVER="${1}"
	
	# package version with randr1.2 support
	local VERSION_HAS_RANDR

	case "${DRIVER}" in
		ati)
			VERSION_HAS_RANDR="1:6.7.193-1"
			;;
		intel)
			VERSION_HAS_RANDR="2:2.1.0-1"
			;;
		mga)
			VERSION_HAS_RANDR="1:1.4.7.dfsg.1-3"
			;;
		*)
			return 1
			;;
	esac

	# get xserver-xorg-video-$driver package version
	local VERSION=$(grep-dctrl -n -s Version -XP "xserver-xorg-video-${DRIVER}" /var/lib/dpkg/status)

	# compare versions, return status
	if [ "${VERSION}" ]; then
		dpkg --compare-versions "${VERSION}" ge "${VERSION_HAS_RANDR}"
		return "${?}"
	fi
	
	return 1
}

do_start() {
	# fll_xorgconfig option array
	local XCFG_OPTS

	# sourced earlier from /etc/default/fll-locales
	if [ "${XKBLAYOUT}" ]; then
		XCFG_OPTS+=("--xkblayout ${XKBLAYOUT}")
		case "${XKBLAYOUT}" in
		 	de)
				XCFG_OPTS+=("--xkbvariant nodeadkeys")
				;;
		esac
	fi

	[ "${XKBMODEL}" ] && XCFG_OPTS+=("--xkbmodel ${XKBMODEL}")
	[ "${XKBVARIANT}" ] && XCFG_OPTS+=("--xkbvariant ${XKBVARIANT}")

	# detect video hardware via fll_xserver_discover
	# XMODULE XVENDORNAME XBOARDNAME XBUSID
	if [ "${XMODULE}" ]; then
		eval $(/usr/sbin/fll_xserver_discover 2>/dev/null | grep -v '^XMODULE=')
	else
		eval $(/usr/sbin/fll_xserver_discover 2>/dev/null)
	fi

	[ "${XMODULE}" ] && XCFG_OPTS+=("--driver ${XMODULE}")
	[ "${XVENDORNAME}" ] && XCFG_OPTS+=("--vendorname ${XVENDORNAME}")
	[ "${XBOARDNAME}" ] && XCFG_OPTS+=("--boardname ${XBOARDNAME}")
	[ "${XBUSID}" ] && XCFG_OPTS+=("--busid ${XBUSID}")

	[ "${XDEPTH}" ] && XCFG_OPTS+=("--colordepth ${XDEPTH}")

	if xserver_has_xrandr "${XMODULE}"; then
		XCFG_OPTS+=("--xrandr")
		[ "${XMODES}" ] && XCFG_OPTS+=("--mode ${XMODES}")
		[ "${XRATE}" ] && XCFG_OPTS+=("--rate ${XRATE}")
	else
		[ "${XHORIZSYNC}" ] && XCFG_OPTS+=("--horizsync ${XHORIZSYNC}")
		[ "${XVERTREFRESH}" ] && XCFG_OPTS+=("--vertrefresh ${XVERTREFRESH}")
		[ "${XMODELINES}" ] && XCFG_OPTS+=("--no-modelines")

		# do xresprobe stuff here
	fi
}

case "${1}" in
	start)
		;;
	stop)
		;;
	restart|force-reload)
		echo "Error: argument '${1}' not supported" >&2
		exit 3
		;;
	*)
		echo "Usage: ${NAME} {start|stop}" >&2
		exit 3
		;;
esac

:
