#!/bin/bash

### BEGIN INIT INFO
# Provides:          fll-xorgconfig
# Required-Start:    
# Required-Stop:     
# Default-Start:     S
# Default-Stop:      0 1 6
# Short-Description: configure Xorg xserver
# Description:       The script is intended to configure the
#                    Xorg xserver for use.
### END INIT INFO

###
# F.U.L.L.S.T.O.R.Y init script
#
# Copyright: (C) 2007 F.U.L.L.S.T.O.R.Y Project
# License:   GPLv2
#
# F.U.L.L.S.T.O.R.Y Project Homepage:
# http://developer.berlios.de/projects/fullstory
###

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="fll-xorgconfig"

###
# source distro-defaults, no-op unless in live mode
###
FLL_DISTRO_MODE="installed"

if [ -s /etc/default/distro ]; then
	. /etc/default/distro
fi

if [ "${FLL_DISTRO_MODE}" != "live" ]; then
	exit 0
fi

if [ ! -x /usr/sbin/fll_xorgconfig ] || [ ! -x /usr/sbin/fll_xserver_discover ]; then
	exit 0
fi

# XKBLAYOUT is stored here by /etc/init.d/fll-locales
if [ -s /etc/default/fll-locales ]; then
	. /etc/default/fll-locales
fi

###
# source lsb functions
###
. /lib/lsb/init-functions

###
# ANSI escape sequences (N, R, G, Y, B, M, C, W)
###
. /lib/fll/fll-init-cols

###
# cheatcode handling
###
if [ -f /proc/cmdline ]; then
	for param in $(cat /proc/cmdline); do
		case "${param}" in
			flldebug=*)
				[ "${param#flldebug=}" = "${NAME#fll-}" ] && set -x
				;;
			noxorgconfig|xorgconfig=no)
				exit 0
				;;
			noxrandr)
				XNOXRANDR="1"
				;;
			nomodelines|noml)
				XNOMODELINES="1"
				;;
			smouse)
				PROBE_SERIAL_MOUSE="1"
				;;
			xdepth=*|depth=*)
				XDEPTH="${param#*depth=}"
				;;
			xhrefresh=*|hsync=*)
				XHORIZSYNC="${param#*=}"
				;;
			xkblayout=*)
				XKBLAYOUT="${param#xkblayout=}"
				;;
			xkbmodel=*)
				XKBMODEL="${param#xkbmodel=}"
				;;
			xkbvariant=*)
				XKBVARIANT="${param#xkbvariant=}"
				;;
			xmodule=*)
				XNEWMODULE="${param#xmodule=}"
				;;
			xrate=*|rate=*)
				XRATE="${param#*rate=}"
				;;
			xscreen=*|screen=*|xmode=*|mode=*)
				XMODES="${param#*=}"
				;;
			xvrefresh=*|vsync=*)
				XVERTREFRESH="${param#*=}"
				;;
		esac
	done
fi

###
# functions...
###
xserver_has_xrandr() {
	[ "${1}" ] && [ -z "${XNOXRANDR}" ] || return 1

	# xserver driver
	local DRIVER="${1}"
	
	# package version with randr1.2 support
	local VERSION_HAS_RANDR

	case "${DRIVER}" in
		ati)
			VERSION_HAS_RANDR="1:6.7.193-1"
			;;
		intel)
			VERSION_HAS_RANDR="2:2.1.0-1"
			;;
		mga)
			VERSION_HAS_RANDR="1:1.4.7.dfsg.1-3"
			;;
		*)
			return 1
			;;
	esac

	# get xserver-xorg-video-$driver package version
	local VERSION=$(grep-dctrl -n -s Version -XP "xserver-xorg-video-${DRIVER}" /var/lib/dpkg/status)

	# compare versions, return status
	if [ "${VERSION}" ]; then
		dpkg --compare-versions "${VERSION}" ge "${VERSION_HAS_RANDR}"
		return "${?}"
	fi
	
	return 1
}

x_res_probe() {
	awk -F: -v driver="${1}" '
		BEGIN {
			cmd = "xresprobe " driver
			while ((cmd | getline) > 0) {
				sub(/^[ ]/,"",$2)
				if ($1 == "freq") {
					split($2,f," ")
					print "XHFREQ" "=\"" f[1] "\""
					print "XVFREQ" "=\"" f[2] "\""
					delete f
				}
				else 
					print "X" toupper($1) "=\"" $2 "\""
			}
		}'
}

do_start() {
	log_daemon_msg "${B}${NAME}${N}"
	log_action_begin_msg " ${G}detecting ${Y}video${G} hardware${N}"
	
	# fll_xorgconfig option array
	local XCFG_OPTS

	# sourced earlier from /etc/default/fll-locales
	if [ "${XKBLAYOUT}" ]; then
		XCFG_OPTS+=("--xkblayout '${XKBLAYOUT}'")
		case "${XKBLAYOUT}" in
		 	de)
				[ "${XKBVARIANT}" ] || XCFG_OPTS+=("--xkbvariant nodeadkeys")
				;;
		esac
	fi

	if [ "${XKBMODEL}" ]; then
		XCFG_OPTS+=("--xkbmodel '${XKBMODEL}'")
	fi

	if [ "${XKBVARIANT}" ]; then
		XCFG_OPTS+=("--xkbvariant '${XKBVARIANT}'")
	fi

	# detect video hardware via fll_xserver_discover
	#     XMODULE XVENDORNAME XBOARDNAME XBUSID
	eval $(/usr/sbin/fll_xserver_discover 2>/dev/null)

	log_end_msg 0
	
	log_daemon_msg "${B}${NAME}${N}"

	if [ "${XNEWMODULE}" ]; then
		# user override
		log_progress_msg "${G}driver(*): ${Y}${XMODULE}${N}"
		XCFG_OPTS+=("--driver '${XNEWMODULE}'")
	elif [ "${XMODULE}" ]; then
		log_progress_msg "${G}driver: ${Y}${XMODULE}${N}"
		XCFG_OPTS+=("--driver '${XMODULE}'")
	fi
	
	if [ "${XVENDORNAME}" ]; then
		# log_progress_msg "${G}vendor: ${Y}${XVENDORNAME}${N}"
		XCFG_OPTS+=("--vendorname '${XVENDORNAME}'")
	fi
	
	if [ "${XBOARDNAME}" ]; then
		log_progress_msg "${G}device: ${Y}${XBOARDNAME}${N}"
		XCFG_OPTS+=("--boardname '${XBOARDNAME}'")
	fi
	
	if [ "${XBUSID}" ]; then
		log_progress_msg "${G}busid: ${Y}${XBUSID}${N}"
		XCFG_OPTS+=("--busid '${XBUSID}'")
	fi

	log_end_msg 0
	
	log_daemon_msg "${B}${NAME}${N}"
	log_action_begin_msg " ${G}detcting ${Y}monitor${G} settings${N}"
	log_end_msg 0

	log_daemon_msg "${B}${NAME}${N}"

	if xserver_has_xrandr "${XMODULE}"; then
		log_progress_msg "${G}driver has ${Y}RandR 1.2${N} support${N}"
		# xrandr aware, we don't have to probe monitor settings :)
		XCFG_OPTS+=("--xrandr")
		
		if [ "${XMODES}" ]; then
			log_progress_msg "${Y}${XMODES}${N}"
			XCFG_OPTS+=("--mode '${XMODES}'")
		fi

		if [ "${XRATE}" ]; then
			log_progress_msg "${G}@ ${Y}${XRATE}${N}"
			XCFG_OPTS+=("--rate '${XRATE}'")
		fi

		log_end_msg 0
	else
		log_progress_msg "${Y}xresprobe ${XMODULE}${N}"
		# legacy style config, we need to probe for optimal X settings
		#     XID XRES XHFREQ XVFREQ XDISPTYPE
		eval $(x_res_probe ${XMODULE})

		# XXX: set default horizsync/vertfrefresh based on XDISPTYPE

		# probed
		if [ "${XID}" ]; then
			# too long: log_progress_msg "${G}id: ${Y}${XID}${N}"
			XCFG_OPTS+=("--modelname '${XID}'")
		fi
		
		if [ "${XMODES}" ]; then
			# cheatcode
			log_progress_msg "${G}res(*): ${Y}${XMODES}${N}"
			XCFG_OPTS+=("--modes '${XMODES}'")
		elif [ "${XRES}" ]; then
			log_progress_msg "${G}res: ${Y}${XRES}${N}"
			# probed
			XCFG_OPTS+=("--modes '${XRES}'")
		fi
		
		if [ "${XHORIZSYNC}" ]; then
			# cheatcode
			XHORIZSYNC_MIN="${XHORIZSYNC%%-*}"
			XHORIZSYNC_MAX="${XHORIZSYNC##*-}"

			if [ "${XHORIZSYNC_MIN}" = "${XHORIZSYNC}" ]; then
				XHORIZSYNC_MIN="28"
			fi

			log_progress_msg "${G}hfreq(*): ${Y}${XHORIZSYNC_MIN}kHz - ${XHORIZSYNC_MAX}kHz${N}"
			XCFG_OPTS+=("--horizsync '${XHORIZSYNC_MIN}-${XHORIZSYNC_MAX}'")
		elif [ "${XHFREQ}" ]; then
			log_progress_msg "${G}hfreq: ${Y}${XHFREQ}${N}"
			# probed
			XCFG_OPTS+=("--horizsync '${XHFREQ}'")
		fi
		
		if [ "${XVERTREFRESH}" ]; then
			# cheatcode
			XVERTREFRESH_MIN="${XVERTREFRESH%%-*}"
			XVERTREFRESH_MAX="${XVERTREFRESH##*-}"

			if [ "${XVERTREFRESH_MIN}" = "${XVERTREFRESH}" ]; then
				XVERTREFRESH_MIN="50"
			fi

			log_progress_msg "${G}vfreq(*): ${Y}${XVERTREFRESH_MIN}Hz - ${XVERTREFRESH_MAX}Hz${N}"
			XCFG_OPTS+=("--vertrefresh '${XVERTREFRESH_MIN}-${XVERTREFRESH_MAX}'")
		elif [ "${XVFREQ}" ]; then
			log_progress_msg "${G}vfreq: ${Y}${XVFREQ}${N}"
			# probed
			XCFG_OPTS+=("--vertrefresh '${XVFREQ}'")
		fi

		# cheatcode
		if [ "${XNOMODELINES}" ]; then
			XCFG_OPTS+=("--no-modelines")
		fi

		log_end_msg 0
	fi

	if [ "${XDEPTH}" ]; then
		XCFG_OPTS+=("--colordepth '${XDEPTH}'")
	fi

	# detect input devices, return string of args to fll_xorgconfig
	eval $(/usr/sbin/fll_xinput_discover 2>/dev/null)
	
	[ "${XINPUT}" ] && XCFG_OPTS+=("${XINPUT}")
	if [ -z "${XINPUT}" ] || [ -n "${PROBE_SERIAL_MOUSE}" ]; then
		#FIXME: layering violation, workaround to probe for serial mice if no other pointing device has been detected
		if [ -x "$(which hwinfo)" ]; then
			XCFG_OPTS+=($(hwinfo --mouse --short | awk '/\/dev\/ttyS[0-9]*/{print "--input name=\"" $2 "\" type=serial device=" $1}'))
		fi
	fi

	# write the configuration to file
	eval "/usr/sbin/fll_xorgconfig ${XCFG_OPTS[@]}"
}

case "${1}" in
	start)
		do_start
		;;
	stop)
		;;
	restart|force-reload)
		echo "Error: argument '${1}' not supported" >&2
		exit 3
		;;
	*)
		echo "Usage: ${NAME} {start|stop}" >&2
		exit 3
		;;
esac

:
