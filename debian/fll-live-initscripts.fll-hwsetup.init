#!/bin/sh

### BEGIN INIT INFO
# Provides:          fll-hwsetup
# Required-Start:    udev
# Required-Stop:     
# Default-Start:     S
# Default-Stop:      
# Short-Description: fll hwsetup init service
# Description:       The purpose of this script is to invoke hwsetup to
#                    facilitate various hardware detection routines.
### END INIT INFO

###
# F.U.L.L.S.T.O.R.Y init script
#
# Copyright: (C) 2007 F.U.L.L.S.T.O.R.Y Project
# License:   GPLv2
#
# F.U.L.L.S.T.O.R.Y Project Homepage:
# http://developer.berlios.de/projects/fullstory
###

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="fll-hwsetup"

###
# source distro-defaults, no-op unless in live mode
###
FLL_DISTRO_MODE="installed"

if [ -s /etc/default/distro ]; then
	. /etc/default/distro
fi

if [ "${FLL_DISTRO_MODE}" != "live" ]; then
	exit 0
fi

###
# VERBOSE setting and other rcS variables
###
#. /lib/init/vars.sh

###
# source lsb functions
###
. /lib/lsb/init-functions

###
# ANSI escape sequences (N, R, G, Y, B, M, C, W)
###
. /lib/fll/fll-init-cols

X_CONF="/etc/X11/xorg.conf"
HWSETUP_MAIN="/etc/hwsetup"

###
# cheatcode handling
###
for param in $(cat /proc/cmdline); do
	case "${param}" in
		flldebug=*)
			if [ "${param#flldebug=}" = "${NAME}" ]; then
				set -x
				HWSETUP_VERBOSITY="-v"
			fi
			;;
		nohwsetup|hwsetup=no)
			exit 0
			;;
		noxorgconfig|nomkxf86config)
			DISABLE_X_CONFIG="yes"
			;;
		vol=*)
			VOLUME="${param#vol=}"
			;;
		volume=*)
			VOLUME="${param#volume=}"
			;;
	esac
done

###
# functions...
###
do_start() {
	log_daemon_msg "${B}${NAME}${N}"; log_action_begin_msg " ${G}starting ${Y}hwsetup${N}"
	hwsetup ${HWSETUP_VERBOSITY}
	log_end_msg "${?}"

	# Read in what hwsetup has found
	if [ -r "${HWSETUP_MAIN}" ]; then
		. "${HWSETUP_MAIN}"
		# XXX: Workaround for new mouse detection
		if [ "${MOUSE_MOUSETYPE}" = "ps2" ]; then
			sed -i "s|/dev/input/mice|/dev/psaux|" "${HWSETUP_MAIN}"
			. "${HWSETUP_MAIN}"
		fi
	fi

	if [ "${BLUETOOTH}" = "bluetooth" ]; then
		log_daemon_msg "${B}${NAME}${N}" "${G}detected ${Y}bluetooth${N}"
		log_end_msg 0
	else
		update-rc.d -f bluetooth remove >/dev/null 2>&1
	fi

	# Mouse name
	if [ "${MOUSE_FULLNAME}" ]; then
		log_daemon_msg "${B}${NAME}${N}" 
		log_progress_msg "${G}mouse name is '${Y}${MOUSE_FULLNAME}${G}'${N}"
		log_end_msg 0
	fi

	# Mouse device
	if [ "${MOUSE_DEVICE}" ]; then
		log_daemon_msg "${B}${NAME}${N}"
		log_progress_msg "${G}mouse device is '${Y}${MOUSE_DEVICE}${G}'${N}"
		log_end_msg 0
	fi

	if [ -z "${MOUSE_DEVICE}" ]; then
		update-rc.d -f gpm remove >/dev/null 2>&1
	fi

	# Sound device
	if [ "${SOUND_FULLNAME}" ]; then
		log_daemon_msg "${B}${NAME}${N}"
		log_progress_msg "${G}sound is '${Y}${SOUND_FULLNAME}${G}'${N}"
		log_end_msg 0
	fi

	# Sound driver
	if [ "${SOUND_DRIVER}" ]; then
		log_daemon_msg "${B}${NAME}${N}"
		log_progress_msg "${G}alsa module is '${Y}${SOUND_DRIVER}${G}'${N}"
		log_end_msg 0
	fi

	###
	# XXX: set volume, this needs some more work
	###
	#case "${VOL}" in
	#	*[!0-9]*)
	#		VOL=50
	#		;;
	#esac
	
	#if [ -z "${VOL}" ] || [ "${VOL}" -lt 0 ] || [ "${VOL}" -gt 100 ]; then
	#	VOL=50
	#fi

	# set volume
	#case "${SOUND_DRIVER}" in
	#	snd*)
	#		#set_mixers
	#		which aumix >/dev/null 2>&1 && aumix -m 0 -v ${VOL} -w ${VOL} -c ${VOL}
	#		;;
	#esac

	###
	# XXX: cleanup bullshit mess, we have sed hack here, and sed hack there
	# XXX: duplication of functions and escape seqences
	# xorgconfig
	###
	if [ "${DISABLE_X_CONFIG}" != "yes" ]; then
		[ -x /usr/sbin/mkxf86config ] && /usr/sbin/mkxf86config

		# Read in changes
		[ -f "${HWSETUP_MAIN}" ] && . "${HWSETUP_MAIN}"
		
		if [ "${XDESC}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}video is '${Y}${XDESC}${G}'${N}"
			log_end_msg 0
		fi

		if [ "${XMODULE}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}using '${Y}${XMODULE}${G}' xserver driver${N}"
			log_end_msg 0
		fi

		if [ "${MODEL}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}monitor is '${Y}${MODEL}${G}'${N}"
			log_end_msg 0
		fi
		
		if [ "${XSCREEN}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}specified mode '${Y}${XSCREEN}${G}'${N}"
			log_end_msg 0
		elif [ "${MODES}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}detected modes '${Y}${MODES#Modes }${G}'${N}"
			log_end_msg 0
		fi

		if [ "${XHREFRESH}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}specified horizontal refresh '${Y}${XHREFRESH}${G}'${N}"
			log_end_msg 0
		elif [ "${HREFRESH}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}detected horizontal refresh '${Y}${HREFRESH}${G}'${N}"
			log_end_msg 0
		fi

		if [ "${XVREFRESH}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}specified vertical refresh '${Y}${XVREFRESH}${G}'${N}"
			log_end_msg 0
		elif [ "${VREFRESH}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}detected vertical refresh '${Y}${VREFRESH}${G}'${N}"
			log_end_msg 0
		fi

		if [ "${XDEPTH}" ]; then
			log_daemon_msg "${B}${NAME}${N}"
			log_progress_msg "${G}specified depth '${Y}${XDPETH}${G}'${N}"
			log_end_msg 0
		fi
	fi
}

case "${1}" in
	start)
		do_start
		;;
	stop)
		;;
	restart|force-reload)
		echo "Error: argument '${1}' not supported" >&2
		exit 3
		;;
	*)
		echo "Usage: ${NAME} {start|stop}" >&2
		exit 3
		;;
esac

:
