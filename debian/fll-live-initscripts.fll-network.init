#!/bin/dash

### BEGIN INIT INFO
# Provides:          fll-network
# Required-Start:    udev
# Required-Stop:     
# Default-Start:     S
# Default-Stop:      
# Short-Description: configure ifupdown for detected network devices
# Description:       Probe cable status of detected network devices and
#                    enable dhcp for those devices which return a positive
#                    cable link status.
### END INIT INFO

###
# F.U.L.L.S.T.O.R.Y init script
#
# Copyright: (C) 2007 F.U.L.L.S.T.O.R.Y Project
# License:   GPLv2
#
# F.U.L.L.S.T.O.R.Y Project Homepage:
# http://developer.berlios.de/projects/fullstory
###

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="fll-network"

###
# source distro-defaults, no-op unless in live mode
###
FLL_DISTRO_MODE="installed"

if [ -s /etc/default/distro ]; then
	. /etc/default/distro
fi

if [ "${FLL_DISTRO_MODE}" != "live" ]; then
	exit 0
fi

###
# VERBOSE setting and other rcS variables
###
#. /lib/init/vars.sh

###
# source lsb functions
###
. /lib/lsb/init-functions

###
# ANSI escape sequences (N, R, G, Y, B, M, C, W)
###
. /lib/fll/fll-init-cols

###
# cheatcode handling
###
if [ -f /proc/cmdline ]; then
	for param in $(cat /proc/cmdline); do
		case "${param}" in
			flldebug=*)
				[ "${param#flldebug=}" = "${NAME#fll-}" ] && set -x
				;;
			nodhcp|dhcp=no)
				NODHCP="yes"
				;;
		esac
	done
fi

detect_netdevs() {
	for netdev in /sys/class/net/*; do
		if [ ! -L "${netdev}/device" ]; then
			# not a valid device
			continue
		fi

		if [ -d "${netdev}/wireless" ] || [ -d "${netdev}/phy80211" ]; then
			# no sane defaults for wireless
			continue
		fi

		if [ -f "${netdev}/addr_len" ]; then
			# unwanted, > 6 byte mac length
			[ "$(cat ${netdev}/addr_len)" -eq 6 ] || continue
		fi

		case "${netdev##*/}" in
			lo|br*|sit*|vmnet*)
				# blacklisted
				continue
				;;
			*)
				echo "${netdev##*/}"
				;;
		esac
	done
}

write_skel_to_eni() {
	cat > /etc/network/interfaces \
<<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback
EOF
}

write_dhcp_to_eni() {
	while [ "${#}" -gt 0 ]; do
		case "${1}" in
			auto)
				shift
				printf "\nauto ${1}\n" >> \
					/etc/network/interfaces
				;;
			allow-hotplug)
				shift
				printf "\nallow-hotplug ${1}\n" >> \
					/etc/network/interfaces
				;;
			*)
				printf "iface ${1} inet dhcp\n" >> \
					/etc/network/interfaces
				shift
				;;
		esac
	done
}

ifplug_dhcp() {
	[ "${1}" ] || return 1

	if ifconfig "${1}" up; then
		# settle
		sleep 2
				
		# probe for link beat
		ifplugstatus --quiet "${1}"
			
		if [ "${?}" -eq 2 ]; then
			# link beat detected
			log_progress_msg "${Y}${1}${N}"
			write_dhcp_to_eni allow-hotplug "${1}"
		else
			# link beat not detected
			ifconfig "${1}" down
		fi
	fi
	
	return 0
}

do_start() {
	write_skel_to_eni

	if [ "${NODHCP}" = "yes" ]; then
		return 0
	fi

	NETDEVICES=$(detect_netdevs)

	if [ -z "${NETDEVICES}" ]; then
		return 0
	fi
	
	log_daemon_msg "${B}${NAME}${N}"
	log_action_begin_msg " ${G}probing for an ${Y}ethernet${G} link${N}"
	
	for netdev in ${NETDEVICES}; do
		# fork child process to do cable link test
		ifplug_dhcp "${netdev}" &
	done

	# wait for child processes to finish. yes, dash supports this.
	wait

	log_end_msg 0
}

case "${1}" in
	start)
		do_start
		;;
	stop)
		;;
	restart|force-reload)
		echo "Error: argument '${1}' not supported" >&2
		exit 3
		;;
	*)
		echo "Usage: ${NAME} {start|stop}" >&2
		exit 3
		;;
esac

:
