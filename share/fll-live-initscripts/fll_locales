#!/bin/sh

# Description:       The purpose of fll-locales is to calculate required
#                    strings to configure the locale settings of system
#                    according to given lang= string.

###
# F.U.L.L.S.T.O.R.Y
#
# Copyright: (C) 2007 - 2024 Kel Modderman <kelvmod@gmail.com>
#            (C) 2008 Michael Deelwater <michael.deelwater@googlemail.com>
#            (C) 2016 Niall Walsh <niallwalsh@celtux.org>
#            (C) 2017 - 2024 Stefan Lippers-Hollmann <s.l-h@gmx.de>
# License:   GPLv2
#
# F.U.L.L.S.T.O.R.Y Project Homepage:
# https://github.com/fullstory
###

PATH=/usr/sbin:/usr/bin
NAME="fll-locales"

if [ "${1}" = "list" ]; then
	sed -n 's![ \t]\+\([a-z-]\+\)|\?\([a-z]\+\)\?).*### [A-Z][A-Z] \(.\+\) kb:\(.\+\) ###!\1, \3,\4!p' "${0}"
	exit 0
fi

###
# source distro-defaults, no-op unless in live mode
###
FLL_DISTRO_MODE="installed"
FLL_DISTRO_NAME="aptosid"

if [ -r /etc/default/distro ]; then
	. /etc/default/distro
fi

if [ "${FLL_DISTRO_MODE}" != "live" ]; then
	[ -n "${FLL_LANG}" ] || exit 0
fi

###
# source fll functions
###
. /usr/lib/init/fll

###
# source LANG functions
###
. /usr/share/fll-live-initscripts/locales

###
# some console-setup defaults
###
CHARMAP="UTF-8"
CODESET="guess"
# Debian agrees that Terminus doesn't look great enough to be default
# http://bugs.debian.org/497331
FONTFACE="VGA"
# Keep the default size of 16 here to avoid clearing VT 1/2 way through
# bootup sequence
FONTSIZE="8x16"

###
# some keyboard-configuration defaults
###
XKBMODEL="pc105"
XKBLAYOUT="us"
XKBVARIANT=""
XKBOPTIONS=""

###
# cheatcode handling
###
if [ -f /proc/cmdline ]; then
	for param in $(cat /proc/cmdline); do
		case "${param}" in
			lang=*)
				LANGUAGE=$(awk 'BEGIN{ print tolower("'"${param#lang=}"'") }')
				;;
			noaptlang)
				NOAPTLANG="yes"
				;;
			xkboptions=*)
				KBOPTIONS="${param#xkboptions=}"
				;;
			keytable=*)
				KEYTABLE="${param#keytable=}"
				;;
			xkbmodel=*)
				KBMODEL="${param#xkbmodel=}"
				;;
			xkbvariant=*)
				KBVARIANT="${param#xkbvariant=}"
				;;
		esac
	done
fi

###
# allow FLL_LANG environment variable to trump
###
if [ -n "${FLL_LANG}" ]; then
	LANGUAGE="${FLL_LANG}"
fi

###
# lang cheatcode can optionally be made of two dash-separated parts ll-cc
# ll -> language code
# cc -> demographic code
###
LANG_CODE=${LANGUAGE%%[-_]*}
DEMO_CODE="$(echo ${LANGUAGE##*[-_]} | awk '{print toupper($1)}')"

LANGS=$(locale -a)
LANG=""

# First check if they entered a built in lang
for LOCALE in ${LANGS}; do
	[ "${LOCALE}" = "${LANG_CODE}_${DEMO_CODE}.utf8" ] && LANG="${LOCALE}" && break

	# match the language to find the default and possible locales
	case "${LOCALE}" in
		${LANG_CODE}_*)
			[ -z "${LANG_POSS}" ] && LANG_POSS="${LOCALE}"
			fll_locale_default ${LOCALE} && LANG_DEF="${LOCALE}"
			;;
	esac
done

# See if we have some knowledge on how to setup the requested locale
if [ -z "${LANG}" ]; then
	for LOCALE in fll_locale_cheats; do
		[ "${LOCALE}" = "${LANG_CODE}_${DEMO_CODE}.utf8" ] && \
			fll_locale_lang ${LOCALE} && break
	done
fi

# Ok just fallback to the default language, or whatever we know about or en_US
if [ -z "$LANG" ]; then
	if [ -n "${LANG_DEF}" ]; then
		LANG="${LANG_DEF}"
	else
		if [ -n "${LANG_POSS}" ]; then
			LANG="${LANG_POSS}"
		else
			LANG="en_US.utf8"
		fi
	fi
fi
export LANG

###
# if demographic code was ommitted, extract default demo_code from LANG
###
if [ -z "${DEMO_CODE}" ]; then
	LANG_CHECK="${LANG%%.*}"
	DEMO_CODE="${LANG_CHECK##*_}"
fi

#set tz, mirror, xkb via fll_locale_demo
if [ "${LANG}" = "${LANG_CODE}_${DEMO_CODE}.utf8" ]; then
	fll_locale_demo ${LANG}
else
	# We've altered their LANG
	fll_locale_cheats
	for LOCALE in ${FLL_LOCALE_CHEATS}; do
		# if we have their locale
		if [ "${LOCALE}" = "${LANG_CODE}_${DEMO_CODE}.utf8" ]; then
			DEMO="${LOCALE}"
			break
		fi

		# if we have a locale in their country
		if [ "${LOCALE#*_}" = "${DEMO_CODE}.utf8" ]; then
			[ -z "${DEMO_POSS}" ] && DEMO_POSS="${LOCALE}"
		fi
	done

	# if it's not a country we know about fallback to default 00_00
	if [ -z "${DEMO}" ]; then
		if [ -n "${DEMO_POSS}" ]; then
			DEMO="${DEMO_POSS}"
		else
			DEMO="00_00.utf8"
		fi
	fi

	fll_locale_demo ${DEMO}
fi

###
# allow KEYTABLE to update above XKBLAYOUT settings
###
if [ -n "${KEYTABLE}" ]; then
	XKBLAYOUT="${KEYTABLE}"
fi

###
# allow KBOPTIONS to update above XKBOPTIONS settings
###
if [ -n "${KBOPTIONS}" ]; then
	XKBOPTIONS="${KBOPTIONS}"
fi

###
# allow KBMODEL to update above XKBMODEL settings
###
if [ -n "${KBMODEL}" ]; then
	XKBMODEL="${KBMODEL}"
fi

###
# allow KBVARIANT to update above XKBVARIANT settings
###
if [ -n "${KBVARIANT}" ]; then
	XKBVARIANT="${KBVARIANT}"
fi

set_locale()
{
	###
	# select default locale via debconf
	###
	echo "configuring locales for '${LANG}'"

	echo "locales locales/default_environment_locale select ${LANG}" | \
		debconf-set-selections
	update-locale "LANG=${LANG}"
}

set_console()
{
	# write configuration: console-setup
	cat > /etc/default/console-setup <<EOF
ACTIVE_CONSOLES="/dev/tty[1-6]"
CHARMAP="${CHARMAP}"
CODESET="${CODESET}"
FONTFACE="${FONTFACE}"
FONTSIZE="${FONTSIZE}"
EOF
	setupcon --save-only

	# write configuration: keyboard-configuration
	rm -f /etc/default/keyboard
	DEBCONF=$(mktemp)
	echo "keyboard-configuration keyboard-configuration/modelcode string ${XKBMODEL}" >> "${DEBCONF}"
	echo "keyboard-configuration keyboard-configuration/layoutcode string ${XKBLAYOUT%%,*}" >> "${DEBCONF}"
	echo "keyboard-configuration keyboard-configuration/variantcode string ${XKBVARIANT}" >> "${DEBCONF}"
	echo "keyboard-configuration keyboard-configuration/optionscode string ${XKBOPTIONS}" >> "${DEBCONF}"
	debconf-set-selections < "${DEBCONF}"
	rm -f "${DEBCONF}"
	dpkg-reconfigure -fnoninteractive keyboard-configuration
	udevadm trigger --property-match=ID_INPUT_KEYBOARD=1
}

apt_install_lang() {
	###
	# install debs for lang from deb archive on cd
	###
	if [ -n "$NOAPTLANG" ]; then
		return
	fi

	# don't touch apt if it has been used and we're noninteractive
	if [ "${1}" != "localize" ] && \
	   [ "/var/lib/dpkg/status" -nt "$(fll_get_mnt)/${FLL_IMAGE_LOCATION}" ]; then
		echo "dpkg already updated"
		return
	fi

	FLL_APT="/fll/apt"
	FLL_APT_I18N="/fll/apt/i18n"
	if [ ! -d "${FLL_APT_I18N}" ]; then
		return
	fi

	# e.g. try /fll/apt/i18n/de_AT then the first de_* found
	if [ -f "${FLL_APT_I18N}/${LANG%%[.]*}" ]; then
		# we have the variant requested
		LANGPACKS=$(cat "${FLL_APT_I18N}/${LANG%%[.]*}")
	elif [ "${LANG%%[_]*}" != 'en' ]; then
		# try fll-locales to find one
		for lf in ${FLL_APT_I18N}/${LANG%[_]*}*; do
			if [ -f "${lf}" ]; then
				# we have a file for the language
				LANGPACKS=$(cat "${lf}")
				break
			fi
		done
		[ -z "${LANGPACKS}" ] && return
	else
		# it's english and we don't have the variant requested
		return
	fi

	echo "installing language packages for '${LANG}'"
	APTGETBASE=$(find "${FLL_APT}" -type f -name '*.deb' | \
		awk 'BEGIN{ print "apt-get -y"} { print " --with-source", $1} END { print " install "}')
	# do a dry-run to calculate size of packages and that will be used
	APTUSESRAW=$(LANG=C ${APTGETBASE} --print-uris ${LANGPACKS} | \
		awk '/^After this operation, /{print $4}')
	APTUSES=${APTUSESRAW%%[.]*MB}
	APTUSES=$(echo $APTUSESRAW | sed 's|MB$||;')

	# lets assume it is <MB and ok if it's not in MB
	if [ "${APTUSES}" != "${APTUSESRAW}" ]; then
		APTUSES=$(echo $APTUSES | sed 's|\.[0-9]*$||;')

		# get a free memory figure
		FREEMEM=$(LANG=C free -m | awk '/\-\/\+\ buffers/{print $4}')

		# check free - used > minspace (256M)
		MEMAFTER=$(( ${FREEMEM} - ${APTUSES} ))
		if [ ${MEMAFTER} -lt 256 ]; then
			echo "minimum 256MB free ram needed for i18n packages"
			echo "you would only have ${MEMAFTER}MB free, not installing"
			apt_install_lang_clean
			return
		fi

		# check used/free > minratio
		USESRATIO=$(( ${FREEMEM} / ${APTUSES} ))
		if [ ${USESRATIO} -lt 5 ]; then
			echo "i18n packages would use (${APTUSES}MB) more then 20% of available memory (${FREEMEM}MB), not installing."
			return
		fi
	fi

	# install the packages
	DEBIAN_FRONTEND=noninteractive ${APTGETBASE} ${LANGPACKS}

}

case "${1}" in
	start)
		set_locale
		set_console
		apt_install_lang
		;;
	localize)
		[ -n "${2}" ] && LANG="${2}"
		# localize
		set_locale
		set_console
		apt_install_lang localize
		;;
	*)
		echo "Usage: ${NAME} {start|localize}" >&2
		exit 3
		;;
esac

:
