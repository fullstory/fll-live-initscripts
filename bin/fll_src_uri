#!/usr/bin/perl

use warnings;
use strict;
use autouse 'Data::Dumper' => qw(Dumper);
use Cwd qw(getcwd realpath);
use Getopt::Long qw(:config bundling no_auto_abbrev);
use Tie::File;

my $self = 'fll_src_uri';
my ($c, $d, $m, $s, $v);

GetOptions(
	'd|debug'      => \$d,
	'm|manifest=s' => \$m,
	's|sources=s'  => \$s,
	'v|verbose'    => \$v,
);

if ($s and $m) {
	my ($slist, $plist) = (realpath($s), realpath($m));
	my (%done, %uris);

	# tie source list to an array, flock it
	my $s_o = tie(my @s, "Tie::File", $slist) or die "E: cannot open $slist for writing: $!\n";
	$s_o->flock;
	@s = ();

	# tie package list to array, flock it
	my $p_o = tie(my @p, "Tie::File", $plist) or die "E: cannot open $plist for writing: $!\n";
	$p_o->flock;
	@p = ();

	eval { require AptPkg::Cache };
	$@ and die "E: requires AptPkg::Cache (libapt-pkg-perl)\n";
	import AptPkg::Cache;

	eval { require AptPkg::Source };
	$@ and die "E: requires AptPkg::Source (libapt-pkg-perl)\n";
	import AptPkg::Source;

	my $cache  = new AptPkg::Cache;
	my $source = new AptPkg::Source;

	for my $name (sort keys %$cache) {
		# process installed packages
		my $state = $cache->{$name}->{'CurrentState'};
		next unless $state eq 'Installed';

		# get package version
		my $version = $cache->{$name}->{'CurrentVer'}->{'VerStr'};

		# format string, write to manifest
		$v and print "V: ${name}=${version}\n";
		push(@p, sprintf("%-55s%s", $name, $version));

		# get src uri's for $name
		for my $vers (@{ $source->{$name} }) {
			$d and print STDERR Dumper $vers;

			# make ref to files list of highest available version
			my $files = $vers->{'Files'};

			# NB: this gets dsc URI for every available version
			# in archive. It cannot be reliably cmp'd with
			# version string of currently installed package for
			# _all_ packages, do not ask me why!
			for my $file (@$files) {
				$d and print STDERR Dumper $file;

				# add uri to hash
				my $auri = $file->{'ArchiveURI'};
				$uris{$auri}++;
				$done{$name}++;
			}
		}

		$done{$name} or warn "W: no source uri for $name\n";
	}

	# write src uri list to file
	push(@s, $_) for (sort keys %uris);
}
else {
	print STDERR <<_EOF_
  This is $self, Copyright (C) 2007 Kel Modderman <kel\@otaku42.de>
  $self is licensed GPLv2, or any later version.

  Usage:

    $self -s|--source source.list -m|--manifest manifest.list [--verbose]

    Requires the libapt-pkg-perl package to be installed. $self will
    generate a list of dsc URI's in the source.list, and a list of installed
    packages in the manifest.list.

_EOF_
	        ;
}
