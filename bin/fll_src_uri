#!/usr/bin/perl

use warnings;
use strict;
use autouse 'Data::Dumper' => qw(Dumper);
use Getopt::Long qw(:config bundling no_auto_abbrev);
use Tie::File;

my $self = 'fll_src_uri';
my ($d, $ml, $sl, $v);

GetOptions(
	'd|debug'      => \$d,
	'm|manifest=s' => \$ml,
	's|sources=s'  => \$sl,
	'v|verbose'    => \$v,
);

if ($sl and $ml) {
	my (%done, %uris);

	# tie source list to an array, flock it
	my $sl_o = tie(my @s, "Tie::File", $sl) or die "E: cannot open $sl for writing: $!\n";
	$sl_o->flock;
	@s = ();

	# tie package list to array, flock it
	my $ml_o = tie(my @m, "Tie::File", $ml) or die "E: cannot open $ml for writing: $!\n";
	$ml_o->flock;
	@m = ();

	eval { require AptPkg::Cache };
	$@ and die "E: requires AptPkg::Cache (libapt-pkg-perl)\n";
	import AptPkg::Cache;

	eval { require AptPkg::Source };
	$@ and die "E: requires AptPkg::Source (libapt-pkg-perl)\n";
	import AptPkg::Source;

	my $cache  = new AptPkg::Cache;
	my $source = new AptPkg::Source;

	for my $name (sort keys %$cache) {
		# process installed packages
		my $state = $cache->{$name}->{'CurrentState'};
		next unless $state eq 'Installed';

		# get package version
		my $version = $cache->{$name}->{'CurrentVer'}->{'VerStr'};

		# format string, write to manifest
		$v and printf("%-55s%s\n", $name, $version);
		push(@m, sprintf("%-55s%s", $name, $version));

		# get src uri's for $name
		for my $vers (@{ $source->{$name} }) {
			$d and print STDERR Dumper $vers;

			# make ref to files list of highest available version
			my $files = $vers->{'Files'};

			# NB: this gets a URI for every available version
			# in archive. It cannot be reliably cmp'd with
			# version string of currently installed package for
			# _all_ packages, do not ask me why!
			for my $file (@$files) {
				$d and print STDERR Dumper $file;

				# add uri to hash
				my $auri = $file->{'ArchiveURI'};
				$uris{$auri}++;
				$done{$name}++;
			}
		}

		$done{$name} or die "W: no source uri for $name\n";
	}

	# write src uri list to file
	push(@s, $_) for (sort keys %uris);
}
else {
	print STDERR <<_EOF_
  This is $self, Copyright (C) 2007 Kel Modderman <kel\@otaku42.de>
  $self is licensed GPLv2, or any later version.

  Usage:

    $self -s|--source source.list -m|--manifest manifest.list [--verbose]

    Requires the libapt-pkg-perl package to be installed. $self will
    generate a list of dsc URI's in the source.list, and a list of installed
    packages in the manifest.list.

_EOF_
	        ;
}
