#!/usr/bin/perl
#   hwsetup-xserver-discover, a Perl script that returns the driver and 
#   description for the videocard detected in the machine it runs on, 
#   plus fallback methods.
#   Copyright (C) 2006  M.L. de Boer a.k.a locsmif <locsmif@kanotix.com>
#   Copyright (C) 2007  Kel Modderman <kel@otaku42.de>

use strict;

use constant {
	DEBUG => 0,
	VGA => '0300',
	PCILST => '/lib/discover/pci.lst',
};

# Check for File::Slurp, catch errors in $@
eval "require File::Slurp"; 
if ($@) {
	# Errors found, use own emulator
	sub slurp {
	 	open(EATFH, '<', $_[0]) or die($!);
		my @lines = <EATFH>;
		close(EATFH);
		return @lines if wantarray;
		chomp($lines[0]);
		return $lines[0];
	}
	DEBUG and print("Using locsmif's File::Slurp emulator\n");
}
else {
	# Present, import 'slurp'
	import File::Slurp 'slurp';
	DEBUG and print("Enabling File::Slurp\n");
}

# Declare variables
my ($busid, $desc, $device, $drv, $mod, $pci, $type, $vname, $vendor);

# Glob /sys/devices/pci*/*/class and /sys/device/pci*/*/*/class
for (</sys/devices/pci*/*{,/*}/class>) {
	# Check for type VGA (see use constant at the top)
	if (substr(slurp($_),2,4) eq VGA) {
		# Strip '/class' from the end of the path
		($pci = $_) =~ s|/class$||;
		last;
	}
}

# Get vendor and device
chomp($vendor = substr(slurp("$pci/vendor"),2,4));
chomp($device = substr(slurp("$pci/device"),2,4));

# Get BusID, ref: xserver-xorg.postinst
open(L, '-|',  "LC_ALL=C lspci -n -d $vendor:$device 2>/dev/null")
	or die("Failed to execute lspci: $!\n");
while (<L>) {
	chomp;
	if (m/^(\w+:)?(\w+):(\w+)\.(\w+)\s+.*/) { 
		$busid = join(':', 'PCI', hex("0x$2"),  hex("0x$3"), hex("0x$4"));
		last;
	}
}
close(L);
	

# Open PCILST for reading
open(F, '<', PCILST) or die("Failed to open pci.lst: $!\n");
while (<F>) {
	chomp;
	# Inside vendor block and new vendor block found? Then exit loop.
	$vname and last if /^\w/;
	# Inside vendor?
	if ($vname) {
		# Match vendor and device of GFX card found or match fallback driver(ffffffff)?
		if (/^\t(?:${vendor}${device}|ffffffff)\t(\S+)\t(\S+\((\S+)\))\t(.+)$/) { 
			# Get strings captured from backreferences above.
			($type, $drv, $mod, $desc) = ($1, $2, $3, "$vname $4");
			# Break loop
			last;
		}
	}
	# Found target vendor block? Set $vname with the vendor name captured from backref.
	/^$vendor\s+(.*)$/ and $vname = $1;
}
close(F);

# If module and description are not both set, goto fallback.
unless ($mod and $vname and $desc) {
	($type, $drv, $mod, $vname, $desc) = (undef, undef, 'vesa', 'All', 'All');
}

# Output stuff that can be sourced by shellscripts.
print <<_EOF_
XMODULE="$mod"
XVENDORNAME="$vname"
XBOARDNAME="$desc"
XBUSID="$busid"
_EOF_
;
exit(0);
